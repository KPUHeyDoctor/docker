version: "3"

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    tty: true


  db:
    image: mysql:5.7
    platform: linux/amd64 # 로컬 환경에서만
    environment:
      MYSQL_DATABASE: HeyDoctor
      MYSQL_USER: heydoctor
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    ports:
      - "3307:3306"
    networks:
      - app-tier
    volumes:
      - ./Backend/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./Backend/my.cnf:/etc/mysql/my.cnf

  backend: 
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    networks:
      - app-tier

  nginx:
    container_name: nginx
    restart: unless-stopped
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      # - "443:443"
    expose:
      - 80
      # - 443
    volumes:
      - build_folder:/var/www/frontend
      # - ./certbot/conf:/etc/letsencrypt
      # - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - app-tier

  # certbot: #certbot 컨테이너 추가
  #   image: certbot/certbot
  #   restart: unless-stopped
  #   container_name: certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt #nginx컨테이너에 certbot컨테이너 연결
  #     - ./certbot/www:/var/www/certbot
  #   depends_on:
  #     - nginx
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app-tier:
    driver: bridge
volumes:
  build_folder: